package tree;

import java.util.LinkedList;
import java.util.List;

public class tree {
	List<Node> nodeList = new LinkedList<Node>();
	int root;
	
	public tree(){
		
	};
	public tree(String[] array, int i){
		this.nodeList = CreateTree(array);
		this.root = i;
	};
	
	public Node getNode(int index) {
		return nodeList.get(index);
	}

	public List<Node> CreateTree(String[] array) {
		
		//List<Node> nodeList = new LinkedList<Node>();
		for(int index = 0; index < array.length; index++)
			nodeList.add(new Node(array[index]));
		
		for(int parentIndex = 0; parentIndex < nodeList.size()/2-1; parentIndex++) {
			nodeList.get(parentIndex).leftnode = nodeList.get(parentIndex*2+1);
			nodeList.get(parentIndex).rightnode = nodeList.get(parentIndex*2+2);
		}
		
		int lastparentIndex = nodeList.size()/2-1;
		nodeList.get(lastparentIndex).leftnode = nodeList.get(lastparentIndex*2+1);
		
		if(nodeList.size()%2 == 1)
			nodeList.get(lastparentIndex).rightnode = nodeList.get(lastparentIndex*2+2);
		
		return nodeList;
	}
	
	//后序遍历
	public void PostOrderTraversal(Node node) {
	//	List<Node> nodelist = new LinkedList<Node>();
		if(node.leftnode != null)
			PostOrderTraversal(node.leftnode);
		if(node.rightnode != null)
			PostOrderTraversal(node.rightnode);
		
		System.out.print(node.str + " ");
	}
	
	//以第i个节点为根的最左叶子节点的序号
	public int GetMostLeftNode(int i) {
		while(nodeList.get(i).leftnode != null)
			i = i*2+1;
		
		return i;
	}
}
